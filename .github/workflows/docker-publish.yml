name: Build & Publish Docker (multi-arch)

on:
  # Manual trigger with push toggle
  workflow_dispatch:
    inputs:
      push:
        description: "Push to Docker Hub?"
        required: true
        default: false
        type: boolean

permissions:
  contents: read

env:
  IMAGE_NAME: xaitan/x-matches   # Docker Hub repo (gemener)

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Build faster on PRs (single arch), full multi-arch on main/tags
      PLATFORMS: ${{ github.event_name == 'pull_request' && 'linux/amd64' || 'linux/amd64,linux/arm64' }}

    concurrency:
      group: docker-publish-${{ github.ref || github.head_ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up QEMU (multi-arch emulation)
        if: env.PLATFORMS != 'linux/amd64'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            # Keep metadata-action defaults; we'll append :latest on main explicitly below
            type=ref,event=branch
            type=ref,event=tag
            type=sha

      - name: Compute tag list (append :latest on main)
        id: tags
        run: |
          echo "list<<EOF" >> $GITHUB_OUTPUT
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_OUTPUT
          if [ "${GITHUB_REF}" = "refs/heads/main" ]; then
            echo "${IMAGE_NAME}:latest" >> $GITHUB_OUTPUT
          fi
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        if: inputs.push == true
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & optionally push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ env.PLATFORMS }}
          push: ${{ inputs.push }}
          provenance: false
          sbom: false
          tags: ${{ steps.tags.outputs.list }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GOPROXY_DEFAULT=https://proxy.golang.org,direct
